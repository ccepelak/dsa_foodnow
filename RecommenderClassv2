#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Nov 25 18:49:00 2021

@author: angeladuarte
"""
#import required libraries

import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer
import math
import random
import re
import geopandas as gpd


#%%
#Preparing the data
df=pd.read_csv("CursoPython/RecommenderSystem/TA_restaurants_curated.csv")
#filter restaurants in Berlin
df_Berlin=df[df.City=="Berlin"]
df_Berlin.head(5)

df_Berlin.shape

columns=["Name", "Cuisine Style", "Ranking", "Rating", "Price Range", "Number of Reviews"]
df[columns].head(5)

#Dropping NA'S and reseting index. Storing the info in a dataframe called df_berlin
df_berlin=df_Berlin.dropna()
df_berlin.reset_index(drop=True, inplace=True)


#First, preparing the data to try the class with: 
# For this we paste the features on a string (Which will be used for the recommender algorithm)
def get_features(data):
  features=[]
  for i in range(len(df_berlin["Cuisine Style"])):
    styles=df_berlin["Cuisine Style"][i]
    styles=re.sub("\'|\[|\]", "", styles)
    styles=re.sub(",", " ", styles)
    price=str(df_berlin["Price Range"][i])
    features.append(styles+" "+price)
  return features

df_berlin['features'] = get_features(df_berlin)



#%%

class RecommenderSystem:
    #Constructor
    def __init__(self, restaurant_list, user_input):
        self.restaurant_list= restaurant_list
        self.user_input=user_input

     #creates a list with the restaurant features and user input
    def prepare_list(self):
        prepared_list=self.restaurant_list.tolist()
        prepared_list.append(self.user_input)
        prepared_list.reverse()
        return prepared_list

    #Uses cosine similarity to get the 10 more similar restaurants to the user input
    def get_similar_restaurants(self):
        cm=CountVectorizer().fit_transform(self.prepare_list())
        cs=cosine_similarity(cm)
        scores=list(enumerate(cs[0]))
        sorted_scores=sorted(scores, key=lambda x:x[1], reverse=True)
        return sorted_scores[0:11]
    
    #creates a list with the full information of the 10 most similar restaurants
    def list_results(self):
        results=[]
        for i in range(0,11):
           restaurants=self.get_similar_restaurants()
           selected_index=restaurants[i][0]
           selected=self.prepare_list()[selected_index]
           results.append(selected)
        return results
        
    def filter_best_ranked(self): 
        print("Work in progress")
        
        
        
#%%
#Testing the recommender system class with some input
input2="Arabic $$$"

syst=RecommenderSystem(df_berlin["features"], input2)

syst.prepare_list()
syst.get_similar_restaurants()
syst.list_results()

        
#%%
#Structure of the recommendation class, which will be used by the RecommenderSystem class
#to display outputs.  
class Recommendation:
    def __init__(self, output):
        self.output = output
        
    def display_output(self):
        print("The recommended restaurants are" + str(self.output))
    
    def plot_output(self):
        print("nothing yet!")
        
#%%